name: MLOps CI/CD

on:
  push:
    branches:
      - main

jobs:
  code_quality:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies for code quality checks
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8

      # Step 4: Run code formatting and linting
      - name: Format and Lint
        run: |
          black models/ model_training.py promote_and_register.py app.py tests/
          
  test_model_training:
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies for testing
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # Step 4: Run the test cases for model_training.py
      - name: Run model training test
        run: python -m pytest tests/test_model_training.py

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test_model_training
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Build Docker images
      - name: Build Docker images
        run: docker-compose build

      # Step 5: Deploy the application (Streamlit and MLflow) locally
      - name: Deploy containers
        run: docker-compose up -d

      # Step 6: Wait for Services to Start
      - name: Wait for Services to Start
        run: |
          echo "Waiting for services to start..."
          sleep 15  # Adjust this based on how long your services take to start

      # Step 7: Test Streamlit App Endpoint
      - name: Test Streamlit App Endpoint
        run: |
          echo "Testing Streamlit App"
          curl --fail http://localhost:8502/predict -X POST -H "Content-Type: application/json" -d '{"feature1": value1, "feature2": value2}' || echo "Streamlit App is not responding!"

      # Step 8: Test MLflow UI
      - name: Test MLflow UI
        run: |
          echo "Testing MLflow UI"
          curl --fail http://localhost:5000/ || echo "MLflow UI is not responding!"

      # Step 9: Display Local URLs
      - name: Display Local URLs
        run: |
          echo "MLflow UI can be accessed at: http://localhost:5000"
          echo "Streamlit app can be accessed at: http://localhost:8502"

      # Step 10: Shutdown Docker Compose
      - name: Shutdown Docker Compose
        run: docker-compose down
